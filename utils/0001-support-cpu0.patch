From 76f045aed726003014f8ba8ca1873f6a8b89494d Mon Sep 17 00:00:00 2001
From: lanzongwei <Ghost-lzw>
Date: Sun, 1 May 2022 22:06:59 +0800
Subject: [PATCH] support cpu0

---
 llvm/CMakeLists.txt                           |  1 +
 llvm/include/llvm/ADT/Triple.h                |  4 ++-
 llvm/include/llvm/BinaryFormat/ELF.h          | 14 ++++++++++
 .../llvm/BinaryFormat/ELFRelocs/Cpu0.def      | 28 +++++++++++++++++++
 llvm/include/llvm/Object/ELFObjectFile.h      | 10 +++++++
 llvm/lib/Object/ELF.cpp                       |  7 +++++
 llvm/lib/Support/Triple.cpp                   | 16 +++++++++++
 7 files changed, 79 insertions(+), 1 deletion(-)
 create mode 100644 llvm/include/llvm/BinaryFormat/ELFRelocs/Cpu0.def

diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 5e786b712051..10b4738ad1d7 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -353,6 +353,7 @@ set(LLVM_ALL_TARGETS
   WebAssembly
   X86
   XCore
+  Cpu0
   )
 
 # List of targets with JIT support:
diff --git a/llvm/include/llvm/ADT/Triple.h b/llvm/include/llvm/ADT/Triple.h
index e140331b2b86..a94d380eea4c 100644
--- a/llvm/include/llvm/ADT/Triple.h
+++ b/llvm/include/llvm/ADT/Triple.h
@@ -105,7 +105,9 @@ public:
     renderscript32, // 32-bit RenderScript
     renderscript64, // 64-bit RenderScript
     ve,             // NEC SX-Aurora Vector Engine
-    LastArchType = ve
+    cpu0,           // for cpu0
+    cpu0el,
+    LastArchType = cpu0el
   };
   enum SubArchType {
     NoSubArch,
diff --git a/llvm/include/llvm/BinaryFormat/ELF.h b/llvm/include/llvm/BinaryFormat/ELF.h
index 74bb3205807f..519aa1c5bb4b 100644
--- a/llvm/include/llvm/BinaryFormat/ELF.h
+++ b/llvm/include/llvm/BinaryFormat/ELF.h
@@ -320,6 +320,7 @@ enum {
   EM_VE = 251,            // NEC SX-Aurora VE
   EM_CSKY = 252,          // C-SKY 32-bit processor
   EM_LOONGARCH = 258,     // LoongArch
+  EM_CPU0 = 999,          // Cpu0
 };
 
 // Object file classes.
@@ -894,6 +895,19 @@ enum {
 #include "ELFRelocs/LoongArch.def"
 };
 
+// Cpu0 Specific e_flags
+enum : unsigned {
+  EF_CPU0_NOREORDER = 0x00000001,  // Don't reorder instructions
+  EF_CPU0_PIC       = 0x00000002,  // Position independent code
+  EF_CPU0_ARCH_32   = 0x50000000,  // CPU032 instruction set per linux not elf.h
+  EF_CPU0_ARCH      = 0xf0000000,  // Mask for applying EF_CPU0_ARCH_ variant
+};
+
+// ELF Relocation types for Cpu0
+enum {
+#include "ELFRelocs/Cpu0.def"
+};
+
 #undef ELF_RELOC
 
 // Section header.
diff --git a/llvm/include/llvm/BinaryFormat/ELFRelocs/Cpu0.def b/llvm/include/llvm/BinaryFormat/ELFRelocs/Cpu0.def
new file mode 100644
index 000000000000..e33b404f7cd4
--- /dev/null
+++ b/llvm/include/llvm/BinaryFormat/ELFRelocs/Cpu0.def
@@ -0,0 +1,28 @@
+#ifndef ELF_RELOC
+#error "ELF_RELOC must be defined"
+#endif
+
+ELF_RELOC(R_CPU0_NONE,                0)
+ELF_RELOC(R_CPU0_32,                  2)
+ELF_RELOC(R_CPU0_HI16,                5)
+ELF_RELOC(R_CPU0_LO16,                6)
+ELF_RELOC(R_CPU0_GPREL16,             7)
+ELF_RELOC(R_CPU0_LITERAL,             8)
+ELF_RELOC(R_CPU0_GOT16,               9)
+ELF_RELOC(R_CPU0_PC16,               10)
+ELF_RELOC(R_CPU0_CALL16,             11)
+ELF_RELOC(R_CPU0_GPREL32,            12)
+ELF_RELOC(R_CPU0_PC24,               13)
+ELF_RELOC(R_CPU0_GOT_HI16,           22)
+ELF_RELOC(R_CPU0_GOT_LO16,           23)
+ELF_RELOC(R_CPU0_RELGOT,             36)
+ELF_RELOC(R_CPU0_TLS_GD,             42)
+ELF_RELOC(R_CPU0_TLS_LDM,            43)
+ELF_RELOC(R_CPU0_TLS_DTP_HI16,       44)
+ELF_RELOC(R_CPU0_TLS_DTP_LO16,       45)
+ELF_RELOC(R_CPU0_TLS_GOTTPREL,       46)
+ELF_RELOC(R_CPU0_TLS_TPREL32,        47)
+ELF_RELOC(R_CPU0_TLS_TP_HI16,        49)
+ELF_RELOC(R_CPU0_TLS_TP_LO16,        50)
+ELF_RELOC(R_CPU0_GLOB_DAT,           51)
+ELF_RELOC(R_CPU0_JUMP_SLOT,          127)
diff --git a/llvm/include/llvm/Object/ELFObjectFile.h b/llvm/include/llvm/Object/ELFObjectFile.h
index 2053b80d3160..dd2f346364e7 100644
--- a/llvm/include/llvm/Object/ELFObjectFile.h
+++ b/llvm/include/llvm/Object/ELFObjectFile.h
@@ -1205,6 +1205,8 @@ StringRef ELFObjectFile<ELFT>::getFileFormatName() const {
       return "elf32-amdgpu";
     case ELF::EM_LOONGARCH:
       return "elf32-loongarch";
+    case ELF::EM_CPU0:
+      return "elf32-cpu0";
     default:
       return "elf32-unknown";
     }
@@ -1329,6 +1331,14 @@ template <class ELFT> Triple::ArchType ELFObjectFile<ELFT>::getArch() const {
       report_fatal_error("Invalid ELFCLASS!");
     }
 
+  case ELF::EM_CPU0:
+    switch (EF.getHeader().e_ident[ELF::EI_CLASS]) {
+      case ELF::ELFCLASS32:
+        return IsLittleEndian ? Triple::cpu0el : Triple::cpu0;
+      default:
+        report_fatal_error("Invalid ELFCLASS!");
+    }
+
   default:
     return Triple::UnknownArch;
   }
diff --git a/llvm/lib/Object/ELF.cpp b/llvm/lib/Object/ELF.cpp
index bcef7ce89499..f2244442f64c 100644
--- a/llvm/lib/Object/ELF.cpp
+++ b/llvm/lib/Object/ELF.cpp
@@ -173,6 +173,13 @@ StringRef llvm::object::getELFRelocationTypeName(uint32_t Machine,
       break;
     }
     break;
+  case ELF::EM_CPU0:
+    switch (Type) {
+#include "llvm/BinaryFormat/ELFRelocs/Cpu0.def"
+    default:
+      break;
+    }
+    break;
   default:
     break;
   }
diff --git a/llvm/lib/Support/Triple.cpp b/llvm/lib/Support/Triple.cpp
index 4aacad40c05e..9a0e7b68a2b6 100644
--- a/llvm/lib/Support/Triple.cpp
+++ b/llvm/lib/Support/Triple.cpp
@@ -83,6 +83,8 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case x86:            return "i386";
   case x86_64:         return "x86_64";
   case xcore:          return "xcore";
+  case cpu0:           return "cpu0";
+  case cpu0el:         return "cpu0el";
   }
 
   llvm_unreachable("Invalid ArchType!");
@@ -172,6 +174,8 @@ StringRef Triple::getArchTypePrefix(ArchType Kind) {
   case loongarch64: return "loongarch";
   
   case dxil:        return "dx";
+  case cpu0:
+  case cpu0el:      return "cpu0";
   }
 }
 
@@ -371,6 +375,8 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
     .Case("loongarch32", loongarch32)
     .Case("loongarch64", loongarch64)
     .Case("dxil", dxil)
+    .Case("cpu0", cpu0)
+    .Case("cpu0el", cpu0el)
     .Default(UnknownArch);
 }
 
@@ -509,6 +515,8 @@ static Triple::ArchType parseArch(StringRef ArchName) {
     .Case("loongarch32", Triple::loongarch32)
     .Case("loongarch64", Triple::loongarch64)
     .Case("dxil", Triple::dxil)
+    .Cases("cpu0", "cpu0eb", "cpu0allegrex", Triple::cpu0)
+    .Cases("cpu0el", "cpu0allegrexel", Triple::cpu0el)
     .Default(Triple::UnknownArch);
 
   // Some architectures require special parsing logic just to compute the
@@ -823,6 +831,8 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::thumbeb:
   case Triple::ve:
   case Triple::xcore:
+  case Triple::cpu0:
+  case Triple::cpu0el:
     return Triple::ELF;
 
   case Triple::ppc64:
@@ -1399,6 +1409,8 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::wasm32:
   case llvm::Triple::x86:
   case llvm::Triple::xcore:
+  case llvm::Triple::cpu0:
+  case llvm::Triple::cpu0el:
     return 32;
 
   case llvm::Triple::aarch64:
@@ -1489,6 +1501,8 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::wasm32:
   case Triple::x86:
   case Triple::xcore:
+  case Triple::cpu0:
+  case Triple::cpu0el:
     // Already 32-bit.
     break;
 
@@ -1537,6 +1551,8 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::tce:
   case Triple::tcele:
   case Triple::xcore:
+  case Triple::cpu0:
+  case Triple::cpu0el:
     T.setArch(UnknownArch);
     break;
 
-- 
2.35.1

